<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>SmartFoxServer Documentation</title>
<script language="javascript" src="../../../lib.js"></script>
<link href="../../../main.css" rel="stylesheet" type="text/css">
</head>

<body class="bodyStyle">
 <p class="title">8.10 Tutorials: Pixel Game (advanced room management) </p>
 <table width="250" border="1" align="right" cellpadding="4" cellspacing="0" bordercolor="#999999">
   <tr>
     <td align="right" bgcolor="#f4f4f4">The <strong>source FLA</strong> of
       this example is found under the <strong>Examples/AS2/19_pro_pixelgame</strong> folder.</td>
   </tr>
 </table>
 <p class="subTitle">&raquo; Introduction</p>
<p>In this article we will analyze some advanced aspects of server side multiplayer
  programming with SmartFoxServer. In particular we will create a simple multiuser
  application that requires a custom logic for handling user login and joining.<br>
  <br>
  The application  will allow the clients to share a pixel board where
  every user can turn on or off each pixel and create simple drawings.<br>
  The particularity of this application is the way the rooms are managed. <br>
  Instead
  of using the default system of getting a list of rooms  and then
  let the user decide which room to join, we will implement a custom logic where
  the server automatically looks for the first available room and join the user
  inside. If all the rooms are full the server will automatically create a new
room and join the client inside. 
<p align="center"><img src="images/pixelGame.gif" alt="pixelGame" width="500" height="349" class="imgBorder"></p>
  The main intent of this article is to describe the logic used to
  create this behaviour. The rest of the application is very simple and uses
  concepts that we have already exposed in the previous article, so we won't
  analyze the, <br>
  <br>
  This tutorial requires SmartFoxServer 1.4.0 or later. Also we strongly reccomend
  that you're familiar with the basics of server side programming with SmartFoxServer
  PRO before starting with this article. <br>
  <br> 
  <span class="subTitle">&raquo; The server side extension </span><br>
  <br>
  You will find the extension source code in the <strong>sfsExtensions/</strong> folder
with the name &quot;pixelGame.as&quot;<br>
<br>
Let's analyze the Actionscript that handles the login event:
<pre class="serverCode"><font color="#993300">function</font> handleInternalEvent(e)
{
        
        <font color="#993300">if</font> (e.name == "<font color='blue'>loginRequest</font>")
        {
                <font color="#993300">var</font> newUser = <font color="#993300">null</font>
                <font color="#993300">var</font> error = "<font color='blue'></font>"
                
                <font color="#993300">var</font> nick = e["<font color='blue'>nick</font>"]
                <font color="#993300">var</font> pass = e["<font color='blue'>pass</font>"]
                <font color="#993300">var</font> chan = e["<font color='blue'>chan</font>"]
                
                <font color="#993300">if</font> (nick == "<font color='blue'></font>")
                nick = getRandomName(12)
                
                <font color="#993300">var</font> obj = _server.loginUser(nick, pass, chan)
                
                <font color="#993300">if</font> (obj.success == <font color="#000087">false</font>)
                error = obj.error
                
                <font color='#878787'>// Send response to client
</font>                <font color="#993300">var</font> response = <font color="#993300">new</font> <font color="#993300">Object</font>()
                
                <font color="#993300">if</font> (error == "<font color='blue'></font>")
                {
                        newUser = _server.instance.getUserByChannel(chan)
                        
                        response._cmd = "<font color='blue'>logOK</font>"
                        response.id = newUser.getUserId()
                        response.name = newUser.getName()
                }
                <font color="#993300">else</font>
                {
                        response._cmd = "<font color='blue'>logKO</font>"
                        response.err = error
                }
                
                _server.sendResponse(response, -1, <font color="#993300">null</font>, chan)
        }
}
</pre>
</p>
<br>
You will notice that the code is almost identical to the one used in the previous
example. We just have added an extra check for empty user names. If a blank nick
name is sent, it will be replaced by a 12 char long random name generated by
the
<strong>getRandomName()</strong> function.<br>
<br>
When the client receivs the &quot;logOK&quot; message it will send a &quot;<strong>jme</strong>&quot;
(join me) command request to the server, which will be handled by the lookforRoom
method of the extension:<br>
<br>
<pre class="serverCode"><font color="#993300">function</font> lookForRoom(usr)
{
        <font color="#993300">var</font> rooms = zone.getRooms()
        <font color="#993300">var</font> found = <font color="#000087">false</font>
        
        <font color="#993300">if</font> (usr != <font color="#993300">null</font>)
        {
                <font color="#993300">for</font> (<font color="#993300">var</font> i = 0; i &lt; rooms.<font color="#000087">length</font>; i++)
                {
                        <font color="#993300">var</font> rm = rooms[i]
                        
                        <font color="#993300">if</font> (rm.howManyUsers() &lt; rm.getMaxUsers())
                        {
                                _server.sendRoomList(usr)
                                
                                <font color="#993300">var</font> j = _server.joinRoom(usr, -1, <font color="#000087">false</font>, rm.getId(), "<font color='blue'></font>", <font color="#000087">false</font>, <font color="#000087">true</font>)
                                
                                <font color="#993300">if</font> (!j)
                                <font color="#993300">trace</font>("<font color='blue'>Oops, user: </font>" + usr.getName() + "<font color='blue'> couldn't join</font>")
                                
                                found = <font color="#000087">true</font>
                                <font color="#993300">break</font>
                        }
                }
                
                <font color="#993300">if</font> (!found)
                {
                        <font color="#993300">var</font> rName = "<font color='blue'>AutoRoom_</font>" + roomCounter
                        roomCounter++
                        
                        <font color="#993300">var</font> r = makeNewRoom(rName, 4, usr)
                        
                        <font color="#993300">if</font> (r != <font color="#993300">null</font>)
                        {
                                _server.sendRoomList(usr)
                                createGrid(r)
                                <font color="#993300">var</font> j = _server.joinRoom(usr, -1, <font color="#000087">false</font>, r.getId(), "<font color='blue'></font>", <font color="#000087">false</font>, <font color="#000087">true</font>)
                        }
                        <font color="#993300">else</font>
                        <font color="#993300">trace</font>("<font color='blue'>Failed creating room &gt;&gt; </font>" + rName)
                        
                }
        }
}
</pre>
<br>
In this function we cycle through all the rooms available in the current Zone
and we check if there's room for a new user.<br>
If the room is found we will join the user inside and break the loop. Also you
can notice that we call a <strong>sendRoomList() </strong>method. We will analyze this in
a moment.<br>
<br>
If all the available rooms are full we will execute the second part of the function.
A new room is created calling the makeNewRoom() method and passing the name of
the new room, the capacity, and the &quot;owner&quot; of the room (the user who created
it)<br>
<strong><br>
NOTE:</strong> you can set the <strong>Server itself </strong>as the owner of
a Room. To do so, you should pass a <strong>null</strong> as the owner parameter. By
doing so the room will never be destroyed. <br>
<br>
This is the code for creating the new room: <br>
<br>
<pre class="serverCode"><font color="#993300">function</font> makeNewRoom(rName, maxU, owner)
{
        <font color="#993300">var</font> rObj 	= {}
        rObj.name 	= rName
        rObj.pwd 	= "<font color='blue'></font>"
        rObj.maxU	= maxU
        rObj.maxS 	= 0
        rObj.isGame	= <font color="#000087">false</font>
        
        <font color="#993300">var</font> r = _server.createRoom(rObj, owner, <font color="#000087">true</font>)
        
        <font color="#993300">return</font> r
}
</pre>
<p>We build an object  and assign the properties of the new room that we'd like
to create. Finally we invoke the _server.createRoom() function and return the
Room object. You can find more details on this last function by checking the
    Server Side API docs.<br>
<br>
Now that we have a new room available for the client we can join him using the
<strong>_server.joinRoom()</strong>command. As you can see we  pass 7 parameters to this function:<br>
<br>
-&gt; the user object<br>
-&gt; the id of the previous room where the user was in (-1  means, no previous
room)<br>
-&gt; a flag to tell the server if we want to leave the previous room (fals in this
case)<br>
-&gt; the id of the new room we want the user to join<br>
-&gt; the password for that room (none in this case)<br>
-&gt; a flag to tell the server 
if the user wants to join as a spectator (for game rooms only, false in this
case)<br>
-&gt; a flag to tell the server if we want to send the default update to all other
clients (this is optional, by default is true)<br>
<br>
The <strong>_server.joinRoom()</strong> method will return a boolean indicating
if the join was successful and it will fire a  <strong>onJoinRoom()</strong> event on the
client side that can be handled in the usual way. </p>
<p><span class="subTitle">&raquo; The room list </span><br>
  <br>
  One of the most important information that the client receives from the server
  at the beginning is the room list. The list contains all the properties of
  each room and it will be populated with the Room Variables and the list of
  users during the execution of your applications.<br> 
  <br>
  Normally this list is
  received by calling the <strong>getRoomList()</strong> method from the client
  side.<br>
  <br>
  In this application we will send the roomList directly from the server extension
  by calling <strong>_server.sendRoomList(), </strong>without the need to request
  it from the client.<br>
  <br>
  <span class="subTitle">&raquo; Conclusions </span></p>
<p>We've seen how to use some of the new commands introduced in the server side
  framework from version 1.4.0<br>
  The ability to create and join rooms on the server side adds more flexibilty
  and power to SmartFoxServer extensions and  allow to create all kind of
  sophisticated behaviours for challenge systems, automatic room management,
  etc...<br>
</p>
<hr width="99%" size="1" noshade>
<table width="99%"  border="0" cellspacing="0" cellpadding="4">
  <tr>
    <td width="33%"><a href="../09_secureLogin/index.htm" class="navLinks"></a></td>
    <td width="34%" align="center"><a href="../../../index.htm" target="_top" class="navLinks">doc index </a></td>
    <td width="33%" align="right"><a href="../otherExamples/index.htm" class="navLinks"></a></td>
  </tr>
</table>

</body>
</html>
